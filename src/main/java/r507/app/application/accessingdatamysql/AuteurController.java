package r507.app.application.accessingdatamysql;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller // This means that this class is a Controller
@RequestMapping(path="/auteur") // This means URL's start with /demo (after Application path)
public class AuteurController {
  @Autowired // This means to get the bean called userRepository
         // Which is auto-generated by Spring, we will use it to handle the data
  private AuteurRepository auteurRepository;

  @PostMapping(path="/add") // Map ONLY POST Requests
  public @ResponseBody String addNewAuteur (@RequestBody CreateAuteur createAuteur) {
    // @ResponseBody means the returned String is the response, not a view name
    // @RequestParam means it is a parameter from the GET or POST request
    Auteur n = new Auteur();
    n.setName(createAuteur.getName());
    n.setMdp(createAuteur.getMdp());
    n.setRole(createAuteur.getRole());
    auteurRepository.save(n);
    return "Saved";
  }

  @PutMapping(path="/modify/{id}") // Map ONLY POST Requests
  public @ResponseBody String modifyAuteur (@PathVariable Integer id,@RequestBody ModifyAuteur modifyAuteur) {
    // @ResponseBody means the returned String is the response, not a view name
    // @RequestParam means it is a parameter from the GET or POST request
    if(!auteurRepository.findById(id).isPresent()){
      return "Auteur not found";
    }
    Auteur n = auteurRepository.findById(id).get();
    if(modifyAuteur.getName()!=null){
      n.setName(modifyAuteur.getName());
    }
    if(modifyAuteur.getMdp()!=null){
      n.setMdp(modifyAuteur.getMdp());
    }
    if(modifyAuteur.getRole()!=null){
      n.setRole(modifyAuteur.getRole());
    }
    auteurRepository.save(n);
    return "Modified";
  }

  @DeleteMapping(path="/delete/{id}") // Map ONLY POST Requests
  public @ResponseBody String deleteAuteur (@PathVariable Integer id) {
    // @ResponseBody means the returned String is the response, not a view name
    // @RequestParam means it is a parameter from the GET or POST request
    if(!auteurRepository.findById(id).isPresent()){
      return "Auteur not found";
    }
    auteurRepository.delete(auteurRepository.findById(id).get());
    return "Deleted";
  }

  @GetMapping(path="/all")
  public @ResponseBody Iterable<Auteur> getAllAuteurs() {
    // This returns a JSON or XML with the users
    return auteurRepository.findAll();
  }
}