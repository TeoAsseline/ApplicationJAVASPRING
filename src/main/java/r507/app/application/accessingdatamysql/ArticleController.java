package r507.app.application.accessingdatamysql;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller // This means that this class is a Controller
@RequestMapping(path="/article") // This means URL's start with /demo (after Application path)
public class ArticleController {
  @Autowired // This means to get the bean called userRepository
         // Which is auto-generated by Spring, we will use it to handle the data
  private ArticleRepository articleRepository;
  @Autowired // This means to get the bean called userRepository
         // Which is auto-generated by Spring, we will use it to handle the data
  private AuteurRepository auteurRepository;
  @Autowired
  private LikeDislikeRepository likeDislikeRepository;

  @PostMapping(path="/add") // Map ONLY POST Requests
  public @ResponseBody String addNewArticle (@RequestBody CreateArticle createArticle) {
    // @ResponseBody means the returned String is the response, not a view name
    // @RequestParam means it is a parameter from the GET or POST request
    Article n = new Article(auteurRepository.findById(createArticle.getAuteur()).get());
    n.setTitre(createArticle.getTitre());
    n.setContenu(createArticle.getContenu());
    n.setDatePublication();
    articleRepository.save(n);
    return "Saved";
  }

  @PostMapping(path="/like")
  public @ResponseBody String addLikeArticle(@RequestBody CreateLikeDislike createlikedislike){
    LikeDislikeKey key= new LikeDislikeKey(createlikedislike.getId_auteur(),createlikedislike.getId_article());
    LikeDislike like= new LikeDislike(key.getArticleId(),key.getAuteurId(),1);
    likeDislikeRepository.save(like);
    return "Like added";
  }

  @PostMapping(path="/dislike")
  public @ResponseBody String addDislikeArticle(@RequestBody CreateLikeDislike createlikedislike){
    LikeDislikeKey key= new LikeDislikeKey(createlikedislike.getId_auteur(),createlikedislike.getId_article());
    LikeDislike like= new LikeDislike(key.getArticleId(),key.getAuteurId(),0);
    likeDislikeRepository.save(like);
    return "Dislike added";
  }

  @PutMapping(path="/modifylike")
  public @ResponseBody String modifyLikeArticle(@RequestBody ModifyLikeDislike modifylikedislike){
    LikeDislikeKey key= new LikeDislikeKey(modifylikedislike.getId_auteur(),modifylikedislike.getId_article());
    int i;
    if(modifylikedislike.getLike()==1){
      i=0;
    }else{
      i=1;
    }
    LikeDislike like= new LikeDislike(key.getArticleId(),key.getAuteurId(),i);
    likeDislikeRepository.save(like);
    return "Like/Dislike modified";
  }

  @DeleteMapping(path="/deletelike")
  public @ResponseBody String deleteLikeArticle(@RequestBody DeleteLikeDislike deletelikedislike){
    LikeDislikeKey key= new LikeDislikeKey(deletelikedislike.getId_auteur(),deletelikedislike.getId_article());
    LikeDislike like= new LikeDislike(key.getArticleId(),key.getAuteurId());
    likeDislikeRepository.delete(like);
    return "Like/Dislike deleted";
  }

  @PutMapping(path="/modify") // Map ONLY POST Requests
  public @ResponseBody String modifyArticle (@RequestBody ModifyArticle modifyArticle) {
    // @ResponseBody means the returned String is the response, not a view name
    // @RequestParam means it is a parameter from the GET or POST request
    Article n = articleRepository.findById(modifyArticle.getId()).get();
    if(modifyArticle.getTitre()!=null){
      n.setTitre(modifyArticle.getTitre());
    }
    if(modifyArticle.getContenu()!=null){
      n.setContenu(modifyArticle.getContenu());
    }
    articleRepository.save(n);
    return "Modified";
  }

  @DeleteMapping(path="/delete") // Map ONLY POST Requests
  public @ResponseBody String deleteArticle (@RequestBody DeleteArticle deleteArticle) {
    // @ResponseBody means the returned String is the response, not a view name
    // @RequestParam means it is a parameter from the GET or POST request
    Article n = articleRepository.findById(deleteArticle.getId()).get();
    n.setAuteur(null);
    articleRepository.delete(n);
    return "Deleted";
  }

  @GetMapping(path="/all")
  public @ResponseBody Iterable<Article> getAllArticles() {
    // This returns a JSON or XML with the users
    return articleRepository.findAll();
  }
}